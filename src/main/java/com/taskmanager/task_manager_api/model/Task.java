package com.taskmanager.task_manager_api.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

/**
 * Entity class representing a Task in the task manager application.
 * This class is mapped to a database table via JPA annotations.
 * Each Task has an autogenerated unique ID, a title, a description, and a completion status.
 */
@Entity
public class Task {

    /**
     * The unique identifier for the Task.
     * This value is autogenerated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The title of the Task.
     */
    private String title;

    /**
     * A detailed description of the Task.
     */
    private String description;

    /**
     * Indicates whether the Task is completed or not.
     */
    private boolean completed;

    /**
     * Default constructor required by JPA.
     */
    public Task() {
    }

    /**
     * Constructs a Task with the specified title, description, and completion status.
     * 
     * @param title the title of the task
     * @param description the description of the task
     * @param completed the completion status of the task
     */
    public Task(String title, String description, boolean completed) {
        this.title = title;
        this.description = description;
        this.completed = completed;
    }

    /**
     * Gets the unique ID of the Task.
     * 
     * @return the task ID
     */
    public Long getId() {
        return id;
    }

    // No setter for ID because it is autogenerated by the database

    /**
     * Gets the title of the Task.
     * 
     * @return the task title
     */
    public String getTitle() {
        return title;
    }

    /**
     * Sets the title of the Task.
     * 
     * @param title the new title to set
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Gets the description of the Task.
     * 
     * @return the task description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the description of the Task.
     * 
     * @param description the new description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Returns whether the Task is completed.
     * 
     * @return true if completed, false otherwise
     */
    public boolean isCompleted() {
        return completed;
    }

    /**
     * Sets the completion status of the Task.
     * 
     * @param completed the new completion status
     */
    public void setCompleted(boolean completed) {
        this.completed = completed;
    }
}
